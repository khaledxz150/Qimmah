@using Qimmah.Models.Identity
@{
    Layout = "_ExternalLayout";
}
@model RegisterViewModel

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
<div class="container-fluid bg-itched-blue-green min-vh-100 d-flex align-items-center justify-content-center p-3">
    <div class="card  bg-white shadow w-100" style="max-width: 768px; height: fit-content;">
        <div class="card-body text-align-start">
            <h4 class="card-title text-center mb-4">@Html.GetWord(121)</h4>

            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            <form id="registrationForm" data-ajax-form action="@Url.Action("Register", "Identity")" method="post"
                novalidate>
                @Html.AntiForgeryToken()

                <div class="row">
                    <div class="col-12 mb-3">
                        @Html.JTextBoxFor(x => x.Email, new Dictionary<string, object> { { "type", "email" } })
                    </div>
                </div>

                <div class="row">
                    <div class="col-12 col-md-6 mb-3">
                        @Html.JPasswordFor(m => m.Password,
                        passwordCustomAttributes: new Dictionary<string, object>
                                                {
                                                { "class", "form-control" },
                                                { "placeholder", Html.GetWord(124) },
                                                { "autocomplete", "current-password" },
                                                { "dir", "ltr" }
                                                },
                                                labelCustomAttributes: new Dictionary<string, object>
                                                {
                                                { "class", "form-label fw-bold" }
                                                },
                                                showRequirements: true,
                                                showStrengthMeter: true
                                                )
                        @Html.ValidationMessageFor(m => m.Password, Html.GetWord(123), new { @class = "invalid-feedback"
                                                })
                    </div>

                    <div class="col-12 col-md-6 mb-3">
                        <label for="PasswordConfirmation" class="form-label fw-bold required">@Html.GetWord(119)</label>
                        <div class="password-input-wrapper position-relative">
                            @Html.TextBoxFor(m => m.PasswordConfirmation, new {
                                                        @class = "form-control password-input no-validate",
                                                        type = "password",
                                                        placeholder = Html.GetWord(125),
                                                        autocomplete = "new-password",
                                                        name = "PasswordConfirmation",
                                                        id = "PasswordConfirmation",
                                                        dir = "ltr",
                                                        required = "required"
                                                        })
                            @Html.ValidationMessageFor(m => m.PasswordConfirmation, Html.GetWord(123), new { @class =
                                                        "invalid-feedback" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-12 col-md-6 mb-3">
                        @Html.JDropDownSelectFor(
                                                expression: x => x.CountriesDDL,
                                                OptionsModel: new JDropDownListModel<RegisterViewModel, DDLViewModel>()
                                                {
                                                    optionsProvider = model => model.CountriesDDL,
                                                    labelSelector = option => $"{option.Text}",
                                                    valueSelector = option => option.Value,
                                                    dataSelector = option => new Dictionary<string, string>()
                                                },
                                                SelectedValue: null
                                                )
                    </div>

                    <div class="col-12 col-md-6 mb-3">
                        @Html.JTextBoxFor(x => x.PhoneNumber)
                    </div>
                </div>

                <button id="submitBtn" type="submit" class="btn btn-secondary w-100 mt-4">@Html.GetWord(121)</button>
            </form>
        </div>
    </div>
</div>

<script src="~/js/identity/register.js"></script>
<style>
    .floating-password-info {
        position: absolute;
        background: #fff;
        border: 1px solid #ddd;
        border-radius: 0.5rem;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
        padding: 1rem;
        z-index: 9999;
        max-width: 100vw;
        transition: all 0.2s ease;
    }

    @@media (max-width: 768px) {
        .floating-password-info {
            left: 50% !important;
            transform: translateX(-50%);
            width: 90% !important;
        }
    }

    @@media (max-width: 576px) {
        .floating-password-info {
            width: 95% !important;
        }
    }
</style>


<script>
    document.addEventListener('DOMContentLoaded', () => {
        const passwordInput = document.getElementById('Password');
        const strengthMeter = document.querySelector('.password-strength-meter[data-target="Password"]');
        const requirements = document.querySelector('.password-requirements[data-target="Password"]');

        if (!passwordInput || !strengthMeter || !requirements) return;

        strengthMeter.style.display = 'none';
        requirements.style.display = 'none';

        const floatingBox = document.createElement('div');
        floatingBox.className = 'floating-password-info';
        floatingBox.style.display = 'none';
        document.body.appendChild(floatingBox);

        const strengthPlaceholder = document.createElement('div');
        const requirementsPlaceholder = document.createElement('div');

        strengthMeter.replaceWith(strengthPlaceholder);
        requirements.replaceWith(requirementsPlaceholder);

        passwordInput.addEventListener('focus', () => {
            const rect = passwordInput.getBoundingClientRect();
            const screenWidth = window.innerWidth;
            const availableRight = screenWidth - rect.right;
            const cardPadding = 16; // Add spacing to avoid hugging the card

            floatingBox.style.display = 'block';

            // Set max width for box regardless of screen size
            const maxWidth = 360;

            if (availableRight > maxWidth + cardPadding) {
                // Place to the right of the input
                floatingBox.style.width = `${Math.min(rect.width, maxWidth)}px`;
                floatingBox.style.left = `${window.scrollX + rect.right + cardPadding}px`;
                floatingBox.style.top = `${window.scrollY + rect.top}px`;
                floatingBox.style.transform = 'none';
            } else {
                // Centered below the input (tablet/mobile)
                floatingBox.style.width = `${Math.min(screenWidth * 0.9, maxWidth)}px`;
                floatingBox.style.left = '50%';
                floatingBox.style.top = `${window.scrollY + rect.bottom + 8}px`;
                floatingBox.style.transform = 'translateX(-50%)';
            }

            strengthMeter.style.display = '';
            requirements.style.display = '';

            floatingBox.innerHTML = ''; // Clear old children
            floatingBox.appendChild(strengthMeter);
            floatingBox.appendChild(requirements);
        });

        passwordInput.addEventListener('blur', () => {
            floatingBox.style.display = 'none';
            strengthMeter.style.display = 'none';
            requirements.style.display = 'none';
            strengthPlaceholder.replaceWith(strengthMeter);
            requirementsPlaceholder.replaceWith(requirements);
        });
    });

</script>
