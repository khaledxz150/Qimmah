// ===========================================
// UTILITIES PARTIAL
// ===========================================

@import "../lib/bootstrap/scss/functions";
@import "../lib/bootstrap/scss/variables";

// Ensure $utilities is a map
$utilities: () !default;

// Define custom width values manually, excluding 25, 50, 75, and 100
$custom-width-values: ( 5:5%,6:6%,7:7%,8:8%,10: 10%, 15: 15%, 20: 20%, 30: 30%, 40: 40%,45: 45%, 60: 60%, 70: 70%, 80: 80%, 90: 90% );

// Merge the custom width utilities into $utilities
$utilities: map-merge($utilities, ( "width": ( property: width, class: w, values: $custom-width-values ) ));
$utilities: map-merge($utilities, ( "min-width": ( property: min-width, class: mw, values: $custom-width-values ) ));
$utilities: map-merge($utilities, ( "height": ( property: height, class: h, values: $custom-width-values ) ));

$spacer: 1rem !default;

// Existing Bootstrap spacers
$default-spacers: ( 0: 0, 1: $spacer * .25, 2: $spacer * .5, 3: $spacer, 4: $spacer * 1.5, 5: $spacer * 3 ) !default;

// Custom spacers
$custom-spacers: ( 45: $spacer * 2.3, 55: $spacer * 4.5, 6: $spacer * 6, 7: $spacer * 9, 8: $spacer * 12 );

// Merge the custom spacers with the default spacers
$spacers: map-merge($default-spacers, $custom-spacers);

// Generate margin utilities
@mixin generate-spacing-utilities($property, $class-prefix) {
    @each $key, $value in $spacers {
        .#{$class-prefix}-#{$key} {
            #{$property}: #{$value};
        }

        .#{$class-prefix}e-#{$key} {
            #{$property}-right: #{$value};
        }

        .#{$class-prefix}s-#{$key} {
            #{$property}-left: #{$value};
        }

        .#{$class-prefix}t-#{$key} {
            #{$property}-top: #{$value};
        }

        .#{$class-prefix}b-#{$key} {
            #{$property}-bottom: #{$value};
        }

        .#{$class-prefix}x-#{$key} {
            #{$property}-top: #{$value};
            #{$property}-bottom: #{$value};
        }

        .#{$class-prefix}y-#{$key} {
            #{$property}-right: #{$value};
            #{$property}-left: #{$value};
        }
    }
}

// Use the mixin to create padding and margin utilities
@include generate-spacing-utilities(margin, m);
@include generate-spacing-utilities(padding, p);



.text-glowing {
    color: $color-black;
    text-shadow: $text-shadow-glow;
}

.color-dark {
    color: $dark-text;
}

.color-accent {
    color: $accent-color;
}

.color-primary {
    color: $primary-bg;
}

.color-grey-light {
    color: $ligher-text;
}

.text-align-start {
    text-align: start;
}

.justify-items-baseline {
    justify-items:baseline;
}


//bottuns
.position-absolute-bottom {
    position: absolute;
    bottom: 20px;
}


//border
.border-color-white {
    border-color: #ffffff !important;
}

.border-radius-md {
    border-radius: $border-radius-md;
}






//Shadows
.svg-shadow-green {
    filter: drop-shadow(rgba(0, 170, 139, 0.9) 0px 0px 100.56577px);
}

